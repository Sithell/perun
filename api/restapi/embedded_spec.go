// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Public Perun API for users",
    "title": "Perun API",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/jobs": {
      "get": {
        "description": "Returns a list of all jobs",
        "summary": "Get all jobs",
        "operationId": "ListJobs",
        "responses": {
          "200": {
            "description": "Successfully fetched jobs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      },
      "post": {
        "description": "Registers a new job and returns its id",
        "summary": "Run a new job",
        "operationId": "CreateJob",
        "parameters": [
          {
            "name": "job",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job successfully registered",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "description": "Returns a job with corresponding id",
        "summary": "Get a job by id",
        "operationId": "GetJobByID",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched job",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        }
      }
    },
    "/jobs/{id}/stdout": {
      "get": {
        "description": "Returns stdout of a job as plain text",
        "summary": "Get stdout of a job",
        "operationId": "GetJobStdout",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched job stdout",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Job": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "command": {
          "description": "Command to run inside of docker container",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "image": {
          "description": "Docker image and tag to start container with",
          "type": "string"
        },
        "status": {
          "description": "Job execution status",
          "type": "string",
          "enum": [
            "created",
            "assigned",
            "running",
            "completed",
            "failed"
          ]
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Public Perun API for users",
    "title": "Perun API",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/jobs": {
      "get": {
        "description": "Returns a list of all jobs",
        "summary": "Get all jobs",
        "operationId": "ListJobs",
        "responses": {
          "200": {
            "description": "Successfully fetched jobs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      },
      "post": {
        "description": "Registers a new job and returns its id",
        "summary": "Run a new job",
        "operationId": "CreateJob",
        "parameters": [
          {
            "name": "job",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job successfully registered",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "description": "Returns a job with corresponding id",
        "summary": "Get a job by id",
        "operationId": "GetJobByID",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched job",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        }
      }
    },
    "/jobs/{id}/stdout": {
      "get": {
        "description": "Returns stdout of a job as plain text",
        "summary": "Get stdout of a job",
        "operationId": "GetJobStdout",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched job stdout",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Job": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "command": {
          "description": "Command to run inside of docker container",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "image": {
          "description": "Docker image and tag to start container with",
          "type": "string"
        },
        "status": {
          "description": "Job execution status",
          "type": "string",
          "enum": [
            "created",
            "assigned",
            "running",
            "completed",
            "failed"
          ]
        }
      }
    }
  }
}`))
}
