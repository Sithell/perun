// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetJobStdoutHandlerFunc turns a function with the right signature into a get job stdout handler
type GetJobStdoutHandlerFunc func(GetJobStdoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJobStdoutHandlerFunc) Handle(params GetJobStdoutParams) middleware.Responder {
	return fn(params)
}

// GetJobStdoutHandler interface for that can handle valid get job stdout params
type GetJobStdoutHandler interface {
	Handle(GetJobStdoutParams) middleware.Responder
}

// NewGetJobStdout creates a new http.Handler for the get job stdout operation
func NewGetJobStdout(ctx *middleware.Context, handler GetJobStdoutHandler) *GetJobStdout {
	return &GetJobStdout{Context: ctx, Handler: handler}
}

/*
	GetJobStdout swagger:route GET /jobs/{id}/stdout getJobStdout

# Get stdout of a job

Returns stdout of a job as plain text
*/
type GetJobStdout struct {
	Context *middleware.Context
	Handler GetJobStdoutHandler
}

func (o *GetJobStdout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetJobStdoutParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
