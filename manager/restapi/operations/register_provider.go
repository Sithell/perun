// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RegisterProviderHandlerFunc turns a function with the right signature into a register provider handler
type RegisterProviderHandlerFunc func(RegisterProviderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterProviderHandlerFunc) Handle(params RegisterProviderParams) middleware.Responder {
	return fn(params)
}

// RegisterProviderHandler interface for that can handle valid register provider params
type RegisterProviderHandler interface {
	Handle(RegisterProviderParams) middleware.Responder
}

// NewRegisterProvider creates a new http.Handler for the register provider operation
func NewRegisterProvider(ctx *middleware.Context, handler RegisterProviderHandler) *RegisterProvider {
	return &RegisterProvider{Context: ctx, Handler: handler}
}

/*
	RegisterProvider swagger:route POST /provider/register registerProvider

# Register a new provider

Registers a provider if it is reachable via gRPC at provided host and port
*/
type RegisterProvider struct {
	Context *middleware.Context
	Handler RegisterProviderHandler
}

func (o *RegisterProvider) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterProviderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
